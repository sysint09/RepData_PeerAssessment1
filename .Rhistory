points(x[g=="Male"],y[g=="Female"])
gfactor<-gl(2,50,labels("Male","Female"))
points(x[g=="Male"],y[g=="Female"])
gfactor<-gl(2,50,labels=c("Male","Female"))
gfactor<-gl(2,50,labels=c("Male","Female"))
points(x[g=="Male"],y[g=="Female"])
plot(x,y,type="n")
points(x[gfactor=="Male"],y[gfactor=="Female"],col="blue")
plot(x,y,type="n")
points(x[gfactor=="Male"],y[gfactor=="Female"],col="blue")
gfactor<-gl(2,50,labels=c("Male","Female"))
points(x[gfactor=="Male"],y[gfactor=="Male"],col="blue")
points(x[gfactor=="Male"],y[gfactor=="Male"],col="green")
points(x[gfactor=="Male"],y[gfactor=="FeMale"],col="red")
points(x[gfactor=="Male"],y[gfactor=="FeMale"],col="red")
points(x[gfactor=="Male"],y[gfactor=="FeMale"],col="red")
points(x[gfactor=="Male"],y[gfactor=="FeMale"],col="red")
points(x[gfactor=="Male"],y[gfactor=="Male"],col="red")
?dir()
dir()
?search
search()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
sessionInfo()
dir()
ls
ls()
Sys.getenv("http_proxy")
dir()
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf<-read.csv(path2csv=path2csv, stringsAsFactors = FALSE)
mydf<-read.csv(file=path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select()
?select
select(cran, ip_id, package, country
)
5:20
select(cran,
| r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
bye()
exit
library(installr)
ver()
?version
R.Version()
install.packages("installr")
P<-C(0.1,0.2,0.3,0.4)
P<-C(0.1,0.2,0.3,0.4)
p<-C(0.1,0.2,0.3,0.4)
p<-c(0.1,0.2,0.3,0.4)
x<-2:5
p*x
sum(p*x)
sum(p*x^2)
p<-c(0.2,0.8)
x<-c(-4,1)
m=sum(p*x)
M<-sum(p*x^2)
M-m^2
x <- 1:4
p <- x/sum(x)
sum(p*x)
x
p
install.packages("knitr")
install.packages("xtable")
setwd('DataScience/GIT/RepData_PeerAssesssment1')
setwd('DataScience/GIT/RepData_PeerAssessment1')
rm(list=ls())
data<-read.csv('activity.csv')
library(dplyr)
mutate(data,date=as.POSIXct(date,format='%Y-%m%-d'))
str(data)
data<-mutate(data,date=as.POSIXct(date,format='%Y-%m%-d'))
str(data)
dataxday<-group-by(data,date)
dataxday<-group_by(data,date)
summarize(dataxday,sum(steps))
str(dataxday)
View(data)
data<-read.csv('activity.csv')
View(data)
datay<-mutate(data,date=as.POSIXct(date,format='%Y-%m-%d'))
View(datay)
data<-mutate(data,date=as.POSIXct(date,format='%Y-%m-%d'))
dataxday<-group_by(data,date)
summarize(dataxday,sum(steps))
dataxday<-summarize(dataxday,sum(steps))
summary(dataxday)
str(dataxday)
dataxday
hist(day)
hist(dataxday)
summarize(dataxday,total=sum(steps))
dataxday<-group_by(data,date)
summarize(dataxday,total=sum(steps))
dataxday<-summarize(dataxday,total=sum(steps))
hist(dataxday)
hist(dataxday$total)
mean(dataxday$total)
mean(dataxday$total,na.rm=true)
mean(dataxday$total,na.rm=TRUE)
median(dataxday$total)
median(dataxday$total,na.rm=TRUE)
stepxint<-group_by(data,interval)
stepxint<-summarize(dataxint,avgstep=mean(steps))
stepxint<-summarize(stepxint,avgstep=mean(steps))
plot(stepxint$interval,stepxint$avgstep,type='l')
View(stepxint)
stepxint<-summarize(stepxint,avgstep=mean(steps,na.rm=TRUE))
stepxint<-group_by(data,interval)
stepxint<-summarize(stepxint,avgstep=mean(steps,na.rm=TRUE))
plot(stepxint$interval,stepxint$avgstep,type='l')
max(stepxint$interval)
summary(stepxint)
max(stepxint$avgstep)
? max
pmax(stepxint$avgstep)
max(stepxint$avgstep)
stepxint$interval[stexint$avgstep==max(stepxint$avgstep)]
stepxint$interval[stepxint$avgstep==max(stepxint$avgstep)]
stepxint$avgstep==max(stepxint$avgstep)
stepxint$interval[stepxint$avgstep==max(stepxint$avgstep)]
View(stepxint)
View(stepxint)
5/2
as.interger(5/2)
as.int(5/2)
as.integer(5/2)
5%%2
as.integer(110/100)
110%%100
i<-stepxint$interval[stepxint$avgstep==max(stepxint$avgstep)]
as.POSIXct("8:35",format="%H:%M")
int<-stepxint$interval[stepxint$avgstep==max(stepxint$avgstep)]
h<-as.interger(int/100)
h<-as.integer(int/100)
m<-int%%100
print(h,":"m)
print(h,":",m)
h
m
print(h&":"&m)
print(h,m)
print(h)
print(paste(h,m,sep=":"))
is.nas(data)
is.na.data.frame(data)
sum(is.na.data.frame(data))
sum(is.na(data$steps))
sum(is.na(data$date))
sum(is.na(data$interval))
sum(is.na(data$steps))
? is.na
? complete.cases
?is.nan
? complete.cases
? is.na
? any
anyNA(data$steps)
is.na(data&steps)
is.na(data$steps)
is.na(data$steps)
tbfill<-is.na(data$steps)
data$interval[tbfill]
View(stepxint)
stepxint$avgstep[stepxint$interval==835]
? function
q
help function
FUN<-function(int){stepxint$avgstep[stepxint$interval==x]}
y<-mutate(data[tbfill],steps=FUN(data$interval))
y<-mutate(data[tbfill,],steps=FUN(data$interval))
y<-mutate(data[tbfill,],steps=FUN(interval))
y<-mutate(data[tbfill,],steps=stepxint$avgstep[stepxint$interval==data$interval]
q
y<-mutate(data[tbfill,],steps=stepxint$avgstep[stepxint$interval==data$interval])
y<-mutate(data,steps=FUN(interval))
FUN<-function(int){stepxint$avgstep[stepxint$interval==int]}
y<-mutate(data,steps=FUN(interval))
y<-mutate(data[tbfill,],steps=FUN(interval))
View(data)
View(y)
data[tbfill,]
head(data[tbfill,])
y<-mutate(data[tbfill,],steps=FUN(interval))
View(y)
FUN(0)
FUN(5)
FUN(10)
FUN(10)
FUN<-function(int){as.integer(stepxint$avgstep[stepxint$interval==int])}
FUN(10)
mutate(data[tbfill,],steps=FUN(Interval))
mutate(data[tbfill,],steps=FUN(interval))
y<-data[tbfill,]
mutate(y,steps=FUN(interval))
y$interval[2304]
FUN(2355)
mutate(y,steps=FUN(interval))
mutate(y,steps=2*interval)
mutate(y,steps=FUN(interval))
mutate(y,steps=2*interval)
FUN(2355)
FUN(835)
mutate(y,y$steps=2*y$interval)
mutate(y,steps=FUN(interval))
FUN(y$interval)
y$interval[290]
FUN(5)
stepxint$interval
?mutate
mutate(y,newsteps=FUN(interval))
str(stepxint)
newvalue<-as.dataframe(stepxint)
newvalue<-as.data.frame(stepxint)
newvalue<-as.data.frame(stepxint)
FUN<-function(int){as.integer(newvalue$avgstep[newvalue$interval==int])}
FUN(2355)
FUN(835)
mutate(y,newsteps=FUN(interval))
?apply
?lapply
FUN(y$interval)
FUN(y$interval[289])
FUN<-function(int){0}
FUN(y$interval[289])
mutate(y,newsteps=FUN(interval))
data[tbfill,]
data[tbfill,]
y<-data[tbfill,]
?search
?seek
?index
? y
tbfill
? is.na
which(data[tbfill])
which(data[tbfill,])
which(is.na(data$steps))
? for
dat[17568]$interval
data[17568]$interval
data$interval[17568]
iddna<-which(is.na(data$steps))
n<-lenght(iddna)
n<-length(iddna)
FUN<-function(int){as.integer(stepxint$avgstep[stepxint$interval==int])}
FUN(835)
idint<-iddna[1]
data$interval[idint]
data$steps[idint]
data$steps[idint]<-FUN(data$interval[idint])
data$steps[idint]
FUN(0)
View(stepxint)
? round
FUN<-function(int){round(stepxint$avgstep[stepxint$interval==int])}
FUN(0)
data$steps[idint]
data$steps[idint]<-NA
data$steps[idint]
databk<-data
iddna<-which(is.na(data$steps))
n<-length(iddna)
FUN<-function(int){round(stepxint$avgstep[stepxint$interval==int])}
for (i in 1:n) {
idint<-iddna[i]
data$steps[idint]<-FUN(data$interval[idint])
}
View(data)
data<-databk
View(data)
newdata<-data
iddna<-which(is.na(newdata$steps))
n<-length(iddna)
FUN<-function(int){round(stepxint$avgstep[stepxint$interval==int])}
for (i in 1:n) {
idint<-iddna[i]
newdata$steps[idint]<-FUN(newdata$interval[idint])
}
ndataxday<-group_by(newdata,date)
ndataxday<-summarize(dataxday,total=sum(steps))
ndataxday<-summarize(ndataxday,total=sum(steps))
hist(ndataxday$total)
mean(ndataxday$total,na.rm=TRUE)
median(ndataxday$total,na.rm=TRUE)
median(dataxday$total,na.rm=TRUE)
mean(dataxday$total,na.rm=TRUE)
sum(data$steps)
sum(dataxday$total)
sum(dataxday$total,na.rm=TRUE)
sum(ndataxday$total,na.rm=TRUE)
avgd<-mean(dataxday$total,na.rm=TRUE)
print("Mean of orginal dataset is:",avgd)
?print
print("Mean of orginal dataset is:")
print("Mean of orginal dataset is:"), print(avgd)
print("Mean of orginal dataset is:") print(avgd)
print("Mean of orginal dataset is:");print(avgd)
print("Median of original dataset is:");print(medd)
medd<-median(dataxday$total,na.rm=TRUE)
print("Median of original dataset is:");print(medd)
avgnd<-mean(ndataxday$total,na.rm=TRUE)
mednd<-median(ndataxday$total,na.rm=TRUE)
totnd<-sum(ndataxday$total,na.rm=TRUE)
print("Mean of new dataset is:"); print(avgnd)
print("Median of new dataset is:");print(mednd)
print("Mean delta is"); print(avgnd-avgd)
print("Median delta is"); print(mednd-medd)
print("Total amount of input missing data is"); print(totnd-totd)
totd<-sum(dataxday$total,na.rm=TRUE)
print("Total amount of input missing data is"); print(totnd-totd)
?weekday
? weekday
? weekdays
View(data)
weekdays(data$date[1])
weekdays(newdata$date[1])
weekdays(newdata$date[3000])
weekdays(newdata$date[5000])
weekdays(newdata$date[7000])
weekdays(newdata$date[10000])
weekdays(newdata$date[10000],abbreviate=TRUE)
Sys.setlocale("LC_TIME", "English") ## sorry my personal LOCALE is Italian
FUN<-function(d){
FUN<-"weekend"
if weekdays(d) %in% c('Sunday','Saturday'){FUN<-"weekday"}
}
FUN<-function(d){
FUN<-"weekend"
if weekdays(d) %in% c('Sunday','Saturday'){
FUN<-"weekday"
}
}
FUN<-function(d){
FUN<-"weekend"
if (weekdays(d) %in% c('Sunday','Saturday')){
FUN<-"weekday"
}
}
FUN(newdata$date[1])
FUN(newdata$date[1])
FUN(newdata$date[3000])
FUN<-function(d){
a<-"weekend"
if (weekdays(d) %in% c('Sunday','Saturday')){
a<-"weekday"
}
}
FUN(newdata$date[3000])
weekdays(newdata$date[3000]) %in% c('Sunday','Saturday')
FUN<-function(d){
a<-"weekend"
if (weekdays(d) %in% c('Sunday','Saturday')){
a<-"weekday"
}
a
}
FUN(newdata$date[3000])
mutate(newdata,FUN(date))
y<-mutate(newdata,FUN(date))
str(y)
summary(y)
y<-mutate(newdata,as.factor(FUN(date))
)
str(y)
FUN(newdata$date)
newdata$date
weekdays(newdata$date[3000]) %in% c('Sunday','Saturday')
weekdays(newdata$date) %in% c('Sunday','Saturday')
weekdays(newdata$date) %in% c('Sunday','Saturday')
mutate(newdata,weekdays(date) %in% c('Sunday','Saturday'))
y<-mutate(newdata,weekdays(date) %in% c('Sunday','Saturday'))
y<-mutate(newdata,wk=weekdays(date) %in% c('Sunday','Saturday'))
? as.factor
as.factor(y$wk)
as.factor(y$wk,labels=c('weekday','weekend'))
wk<-factor(c(FALSE,TRUE), labels = c("weekday", "weekend"))
y<-mutate(newdata,wk=factor(weekdays(date) %in% c('Sunday','Saturday'), labels = c("weekday", "weekend")))
str(y)
View(newdata)
newdata<-mutate(newdata,wk=factor(weekdays(date) %in% c('Sunday','Saturday'), labels = c("weekday", "weekend")))
View(newdata)
stepxwint<-group_by(newdata,wk,interval)
stepxwint<-summarize(stepxwint,avgstep=mean(steps))
qplot(interval,avgstep,data=stepxwint,facets=wk~.,main="Title")
library(ggplot2)
qplot(interval,avgstep,data=stepxwint,facets=wk~.,main="Title")
qplot(interval,avgstep,geom=line,data=stepxwint,facets=wk~.,main="Title")
? qplot
g<-qplot(interval,avgstep,data=stepxwint,facets=wk~.,main="Title")
g<-g+geom_line()
print g
g
g<-qplot(interval,avgstep,data=stepxwint,facets=wk~.,main="Title")
g<-g+geom_line()
print(g)
?qplot
qplot(interval,avgstep,data=stepxwint,geom='path',facets=wk~.,main="Title")
getwd
getwd()
library(knirt)
library(knitr)
library(knitr)
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
browseURL('PA1_template.html')
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
hist(dataxday$total,xlabel='Total number of steps taken',title='Freguency of total number of steps x day')
?hist
hist(dataxday$total,xlab='Total number of steps taken',title='Freguency of total number of steps x day')
hist(dataxday$total,xlab='Total number of steps taken',main='Freguency of total number of steps x day')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
plot(stepxint$interval,stepxint$avgstep,type='l',xlab='Interval',ylab='Number of steps',main='Average Number of steps per interval')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
? plot
g1<-qplot(interval,avgstep,data=stepxint,main="Title")
g1<-g1+scale_x_discrete(breaks=seq(0, 2400, by=100))
g1
?qplot
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
n
FUNFIL(835)
FUNFIL<-function(int){round(stepxint$avgstep[stepxint$interval==int])}
FUNFIL(835)
for (i in 1:n) {
idint<-iddna[i]
newdata$steps[idint]<-FUNFIL(newdata$interval[idint])
}
View(newdata)
rm(list=ls())
knit2html('PA1_template.Rmd')
rm(list=ls())
knit2html('PA1_template.Rmd')
rm(list=ls())
knit2html('PA1_template.Rmd')
FUNFIL<-function(int){
round(stepxint$avgstep[stepxint$interval==int])
}
rm(list=ls())
knit2html('PA1_template.Rmd')
rm(list=ls())
knit2html('PA1_template.Rmd')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
rm(list=ls())
knit2html('PA1_template.Rmd')
browseURL('PA1_template.html')
